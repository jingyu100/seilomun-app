import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import { useNavigation, useRoute } from "@react-navigation/native";
import { useWebSocket } from "../../../Context/WebSocketContext";
import useLogin from "../../../Hook/useLogin";
import useUserStatus from "../../../Hook/useUserStatus";
import api from "../../../api/api";

export default function CustomerChatting() {
  const navigation = useNavigation();
  const route = useRoute();
  const { user } = useLogin();

  // ÎùºÏö∞Ìä∏ÏóêÏÑú Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Î∞õÍ∏∞ (sellerId, sellerStoreName Îì±)
  const {
    sellerId,
    sellerStoreName,
    chatRoomId: initialChatRoomId,
    customerId,
  } = route.params || {};

  // ÏÉÅÎåÄÎ∞© Ï†ïÎ≥¥ Í≤∞Ï†ï
  const targetUserId = user?.userType === "CUSTOMER" ? sellerId : customerId;
  const targetUserType = user?.userType === "CUSTOMER" ? "SELLER" : "CUSTOMER";

  // ÏÉÅÎåÄÎ∞© Ïò®ÎùºÏù∏ ÏÉÅÌÉú ÌôïÏù∏
  const { getStatusText, getStatusColor } = useUserStatus(targetUserId, targetUserType);

  const [chatRoomId, setChatRoomId] = useState(initialChatRoomId);

  // initialChatRoomIdÍ∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏ (Ï±ÑÌåÖÎ∞© Î™©Î°ùÏóêÏÑú Ïò® Í≤ΩÏö∞)
  useEffect(() => {
    if (initialChatRoomId && initialChatRoomId !== chatRoomId) {
      console.log("üìã initialChatRoomIdÎ°ú chatRoomId ÏóÖÎç∞Ïù¥Ìä∏:", initialChatRoomId);
      setChatRoomId(initialChatRoomId);
    }
  }, [initialChatRoomId, chatRoomId]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const scrollViewRef = useRef(null);

  const {
    connected,
    connectionStatus,
    subscribeToRoom,
    unsubscribeFromRoom,
    sendMessage,
    getRoomMessages,
    setRoomMessages,
    leaveRoom,
  } = useWebSocket();

  // ÌòÑÏû¨ Ï±ÑÌåÖÎ∞©Ïùò Î©îÏãúÏßÄÎì§
  const messages = getRoomMessages(chatRoomId || "");

  // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÎòêÎäî Ï°∞Ìöå
  const createOrGetChatRoom = useCallback(async () => {
    console.log("=== createOrGetChatRoom Ìò∏Ï∂úÎê® ===");
    console.log("sellerId:", sellerId);
    console.log("chatRoomId:", chatRoomId);

    // Ïù¥ÎØ∏ chatRoomIdÍ∞Ä ÏûàÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞ (Ï±ÑÌåÖÎ∞© Î™©Î°ùÏóêÏÑú Ïò® Í≤ΩÏö∞)
    if (chatRoomId) {
      console.log("‚úÖ Ïù¥ÎØ∏ chatRoomIdÍ∞Ä ÏûàÏùå:", chatRoomId);
      return;
    }

    // sellerIdÍ∞Ä ÏóÜÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
    if (!sellerId) {
      console.log("‚ùå sellerIdÍ∞Ä ÏóÜÏùå");
      return;
    }

    console.log("API Ìò∏Ï∂ú ÏãúÏûë...");
    setIsLoading(true);
    try {
      const response = await api.post("/api/chat/rooms", {
        sellerId: sellerId,
      });

      console.log("‚úÖ Ï±ÑÌåÖÎ∞© API Ï†ÑÏ≤¥ ÏùëÎãµ:", response.data);
      console.log("‚úÖ response.data.data:", response.data.data);

      // Î∞±ÏóîÎìú ApiResponseJson Íµ¨Ï°∞ Î∂ÑÏÑù
      let roomId;
      if (response.data.data) {
        roomId = response.data.data.chatRoomId;
      } else if (response.data.chatRoomId) {
        roomId = response.data.chatRoomId;
      } else {
        console.error("chatRoomIdÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏùëÎãµ Íµ¨Ï°∞:", response.data);
        return;
      }

      setChatRoomId(roomId);
      console.log("Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±/Ï°∞Ìöå ÏÑ±Í≥µ:", roomId);
    } catch (error) {
      console.error("‚ùå Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±/Ï°∞Ìöå Ïã§Ìå®:", error);
      console.error("‚ùå ÏóêÎü¨ ÏùëÎãµ:", error.response?.data);
      console.error("‚ùå ÏóêÎü¨ ÏÉÅÌÉú:", error.response?.status);
      Alert.alert("Ïò§Î•ò", "Ï±ÑÌåÖÎ∞©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
    } finally {
      setIsLoading(false);
    }
  }, [sellerId, chatRoomId]);

  // Í∏∞Ï°¥ Ï±ÑÌåÖ Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞
  const loadChatMessages = useCallback(async () => {
    console.log("=== loadChatMessages Ìò∏Ï∂úÎê® ===");
    console.log("chatRoomId:", chatRoomId);

    if (!chatRoomId) {
      console.log("chatRoomIdÍ∞Ä ÏóÜÏñ¥ÏÑú Î©îÏãúÏßÄ Î°úÎìú Ï§ëÎã®");
      return;
    }

    try {
      const response = await api.get(`/api/chat/rooms/${chatRoomId}`);
      console.log("Ï±ÑÌåÖ Î©îÏãúÏßÄ API Ï†ÑÏ≤¥ ÏùëÎãµ:", response.data);

      // ApiResponseJson Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
      const messageData = response.data.data || response.data;
      const chatMessages = messageData.ok || messageData || [];

      console.log("ÌååÏã±Îêú Î©îÏãúÏßÄÎì§:", chatMessages);
      console.log("Ï≤´ Î≤àÏß∏ Î©îÏãúÏßÄ Íµ¨Ï°∞:", chatMessages[0]);

      setRoomMessages(chatRoomId, chatMessages);

      console.log("Í∏∞Ï°¥ Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú:", chatMessages.length, "Í∞ú");
    } catch (error) {
      console.error("Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú Ïã§Ìå®:", error);
    }
  }, [chatRoomId]);

  // Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const handleSendMessage = useCallback(() => {
    console.log("üì§ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÎèÑ...");
    console.log("inputMessage:", inputMessage);
    console.log("chatRoomId:", chatRoomId);
    console.log("connected:", connected);

    if (!inputMessage.trim()) {
      console.log("‚ùå Îπà Î©îÏãúÏßÄ");
      return;
    }
    if (!chatRoomId) {
      console.log("‚ùå chatRoomId ÏóÜÏùå");
      return;
    }
    if (!connected) {
      console.log("‚ùå WebSocket Ïó∞Í≤∞ ÏïàÎê®");
      Alert.alert("Ïó∞Í≤∞ Ïò§Î•ò", "Ï±ÑÌåÖ ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
      return;
    }

    console.log("‚úÖ Ï°∞Í±¥ ÌÜµÍ≥º, sendMessage Ìò∏Ï∂ú...");
    const success = sendMessage(chatRoomId, inputMessage.trim(), sellerId);
    console.log("sendMessage Í≤∞Í≥º:", success);

    if (success) {
      console.log("‚úÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÑ±Í≥µ");
      setInputMessage("");
      // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    } else {
      console.log("‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®");
      Alert.alert("Ï†ÑÏÜ° Ïã§Ìå®", "Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°Ìï† Ïàò ÏóÜÏäµÎãàÎã§.");
    }
  }, [inputMessage, chatRoomId, connected, sendMessage, sellerId]);

  // Ï±ÑÌåÖÎ∞© Íµ¨ÎèÖ/Ìï¥Ï†ú
  useEffect(() => {
    if (chatRoomId && connected) {
      console.log("üîó Ï±ÑÌåÖÎ∞© Íµ¨ÎèÖ Î∞è Î©îÏãúÏßÄ Î°úÎìú:", chatRoomId);
      subscribeToRoom(chatRoomId);

      return () => {
        console.log("üîó Ï±ÑÌåÖÎ∞© Íµ¨ÎèÖ Ìï¥Ï†ú:", chatRoomId);
        unsubscribeFromRoom(chatRoomId);
      };
    }
  }, [chatRoomId, connected]);

  // Î©îÏãúÏßÄ Î°úÎìúÎäî Î≥ÑÎèÑ useEffectÎ°ú Î∂ÑÎ¶¨ (Ìïú Î≤àÎßå Ïã§Ìñâ)
  useEffect(() => {
    if (chatRoomId) {
      loadChatMessages();
    }
  }, [chatRoomId]); // chatRoomIdÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßå Ïã§Ìñâ

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±/Ï°∞Ìöå
  useEffect(() => {
    createOrGetChatRoom();
  }, [createOrGetChatRoom]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï±ÑÌåÖÎ∞© ÎÇòÍ∞ÄÍ∏∞
  useEffect(() => {
    return () => {
      if (chatRoomId) {
        leaveRoom(chatRoomId);
      }
    };
  }, [chatRoomId, leaveRoom]);

  // ÏÉà Î©îÏãúÏßÄÍ∞Ä Ïò§Î©¥ Ïä§ÌÅ¨Î°§ Îß® ÏïÑÎûòÎ°ú
  useEffect(() => {
    if (messages.length > 0) {
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  // ÏïàÏ†ÑÌïú ÎÇ†Ïßú ÌååÏã± Ìï®Ïàò
  const parseDate = (dateString) => {
    if (!dateString) return new Date();

    try {
      // ISO 8601 ÌòïÏãù Ï≤òÎ¶¨
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        console.warn("Invalid date:", dateString);
        return new Date();
      }
      return date;
    } catch (error) {
      console.warn("Date parsing error:", error, dateString);
      return new Date();
    }
  };

  // Î©îÏãúÏßÄ ÏïÑÏù¥ÌÖú Î†åÎçîÎßÅ
  const renderMessage = (message, index) => {
    // timestamp ÎòêÎäî createdAt ÌïÑÎìú ÏÇ¨Ïö©
    const messageTime = message.timestamp || message.createdAt;

    // ÎîîÎ≤ÑÍπÖ ÏôÑÎ£å: Î©îÏãúÏßÄ Î†åÎçîÎßÅ Î°úÍ∑∏ Ï†úÍ±∞
    // console.log(`Î©îÏãúÏßÄ ${index} ÎîîÎ≤ÑÍπÖ:`, { ... });
    const isMyMessage =
      message.senderType === (user?.userType === "CUSTOMER" ? "C" : "S");

    const currentTime = parseDate(messageTime).getTime();
    const prevTime = messages[index - 1]
      ? parseDate(
          messages[index - 1].timestamp || messages[index - 1].createdAt
        ).getTime()
      : 0;
    const showTimestamp = index === 0 || currentTime - prevTime > 60000;

    return (
      <View
        key={index}
        style={[
          styles.messageContainer,
          isMyMessage ? styles.myMessage : styles.otherMessage,
        ]}
      >
        {!isMyMessage && <Text style={styles.senderName}>{message.senderName}</Text>}
        <View
          style={[
            styles.messageBubble,
            isMyMessage ? styles.myBubble : styles.otherBubble,
          ]}
        >
          <Text
            style={[
              styles.messageText,
              isMyMessage ? styles.myMessageText : styles.otherMessageText,
            ]}
          >
            {message.content}
          </Text>
        </View>
        {showTimestamp && (
          <Text style={styles.timestamp}>
            {parseDate(messageTime).toLocaleTimeString("ko-KR", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </Text>
        )}
        {isMyMessage && message.read === "N" && (
          <Text style={styles.unreadIndicator}>1</Text>
        )}
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#333" />
        </TouchableOpacity>
        <View style={styles.headerCenter}>
          <Text style={styles.headerTitle}>{sellerStoreName || "Ï±ÑÌåÖ"}</Text>
          <View style={styles.statusContainer}>
            <View style={[styles.statusDot, { backgroundColor: getStatusColor() }]} />
            <Text style={styles.statusText}>{getStatusText()}</Text>
          </View>
        </View>
        <View style={styles.headerRight}>
          <View
            style={[
              styles.connectionStatus,
              {
                backgroundColor: connected
                  ? "#4CAF50"
                  : connectionStatus === "connecting"
                  ? "#FF9800"
                  : "#F44336",
              },
            ]}
          >
            <Text style={styles.connectionText}>
              {connectionStatus === "connecting"
                ? "Ïû¨Ïó∞Í≤∞ Ï§ë..."
                : connected
                ? "Ïó∞Í≤∞Îê®"
                : "Ïó∞Í≤∞ ÎÅäÍπÄ"}
            </Text>
          </View>
        </View>
      </View>

      {/* Î©îÏãúÏßÄ ÏòÅÏó≠ */}
      <KeyboardAvoidingView
        style={styles.chatContainer}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          contentContainerStyle={styles.messagesContent}
          showsVerticalScrollIndicator={false}
        >
          {isLoading ? (
            <View style={styles.loadingContainer}>
              <Text style={styles.loadingText}>Ï±ÑÌåÖÎ∞©ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</Text>
            </View>
          ) : messages.length === 0 ? (
            <View style={styles.emptyContainer}>
              <Text style={styles.emptyText}>Ï≤´ Î©îÏãúÏßÄÎ•º Î≥¥ÎÇ¥Î≥¥ÏÑ∏Ïöî!</Text>
            </View>
          ) : (
            messages.map((message, index) => renderMessage(message, index))
          )}
        </ScrollView>

        {/* ÏûÖÎ†• ÏòÅÏó≠ */}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            value={inputMessage}
            onChangeText={setInputMessage}
            placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
            placeholderTextColor="#999"
            multiline
            maxLength={500}
            editable={connected}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              { opacity: inputMessage.trim() && connected ? 1 : 0.5 },
            ]}
            onPress={handleSendMessage}
            disabled={!inputMessage.trim() || !connected}
          >
            <Ionicons name="send" size={20} color="white" />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  backButton: {
    padding: 4,
  },
  headerCenter: {
    flex: 1,
    alignItems: "center",
    marginLeft: 12,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  statusContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 2,
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 4,
  },
  statusText: {
    fontSize: 12,
    color: "#666",
  },
  headerRight: {
    alignItems: "flex-end",
  },
  connectionStatus: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  connectionText: {
    fontSize: 12,
    color: "white",
    fontWeight: "500",
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  messagesContent: {
    padding: 16,
    paddingBottom: 8,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 40,
  },
  loadingText: {
    fontSize: 16,
    color: "#666",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 40,
  },
  emptyText: {
    fontSize: 16,
    color: "#999",
  },
  messageContainer: {
    marginBottom: 12,
  },
  myMessage: {
    alignItems: "flex-end",
  },
  otherMessage: {
    alignItems: "flex-start",
  },
  senderName: {
    fontSize: 12,
    color: "#666",
    marginBottom: 4,
    marginLeft: 8,
  },
  messageBubble: {
    maxWidth: "80%",
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
  },
  myBubble: {
    backgroundColor: "#007AFF",
  },
  otherBubble: {
    backgroundColor: "white",
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  messageText: {
    fontSize: 16,
    lineHeight: 20,
  },
  myMessageText: {
    color: "white",
  },
  otherMessageText: {
    color: "#333",
  },
  timestamp: {
    fontSize: 11,
    color: "#999",
    marginTop: 4,
    marginHorizontal: 8,
  },
  unreadIndicator: {
    fontSize: 12,
    color: "#FF6B6B",
    fontWeight: "600",
    marginTop: 4,
    marginRight: 8,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "flex-end",
    backgroundColor: "white",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderTopWidth: 1,
    borderTopColor: "#e0e0e0",
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 10,
    fontSize: 16,
    maxHeight: 100,
    backgroundColor: "#f8f8f8",
  },
  sendButton: {
    backgroundColor: "#007AFF",
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    marginLeft: 8,
  },
});
